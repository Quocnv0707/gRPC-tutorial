// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: caculator/caculatorpb/caculator.proto

package caculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaculatorService_Sum_FullMethodName                      = "/caculator.CaculatorService/Sum"
	CaculatorService_PrimeNumberDecomposition_FullMethodName = "/caculator.CaculatorService/PrimeNumberDecomposition"
	CaculatorService_Average_FullMethodName                  = "/caculator.CaculatorService/Average"
	CaculatorService_FindMax_FullMethodName                  = "/caculator.CaculatorService/FindMax"
	CaculatorService_SumWithDeadline_FullMethodName          = "/caculator.CaculatorService/SumWithDeadline"
	CaculatorService_Square_FullMethodName                   = "/caculator.CaculatorService/Square"
)

// CaculatorServiceClient is the client API for CaculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaculatorServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeNumberDecomposition(ctx context.Context, in *PNDRequest, opts ...grpc.CallOption) (CaculatorService_PrimeNumberDecompositionClient, error)
	Average(ctx context.Context, opts ...grpc.CallOption) (CaculatorService_AverageClient, error)
	FindMax(ctx context.Context, opts ...grpc.CallOption) (CaculatorService_FindMaxClient, error)
	SumWithDeadline(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	Square(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*SquareResponse, error)
}

type caculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaculatorServiceClient(cc grpc.ClientConnInterface) CaculatorServiceClient {
	return &caculatorServiceClient{cc}
}

func (c *caculatorServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, CaculatorService_Sum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caculatorServiceClient) PrimeNumberDecomposition(ctx context.Context, in *PNDRequest, opts ...grpc.CallOption) (CaculatorService_PrimeNumberDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CaculatorService_ServiceDesc.Streams[0], CaculatorService_PrimeNumberDecomposition_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &caculatorServicePrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CaculatorService_PrimeNumberDecompositionClient interface {
	Recv() (*PNDResponse, error)
	grpc.ClientStream
}

type caculatorServicePrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *caculatorServicePrimeNumberDecompositionClient) Recv() (*PNDResponse, error) {
	m := new(PNDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *caculatorServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (CaculatorService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CaculatorService_ServiceDesc.Streams[1], CaculatorService_Average_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &caculatorServiceAverageClient{stream}
	return x, nil
}

type CaculatorService_AverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type caculatorServiceAverageClient struct {
	grpc.ClientStream
}

func (x *caculatorServiceAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *caculatorServiceAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *caculatorServiceClient) FindMax(ctx context.Context, opts ...grpc.CallOption) (CaculatorService_FindMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &CaculatorService_ServiceDesc.Streams[2], CaculatorService_FindMax_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &caculatorServiceFindMaxClient{stream}
	return x, nil
}

type CaculatorService_FindMaxClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type caculatorServiceFindMaxClient struct {
	grpc.ClientStream
}

func (x *caculatorServiceFindMaxClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *caculatorServiceFindMaxClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *caculatorServiceClient) SumWithDeadline(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, CaculatorService_SumWithDeadline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caculatorServiceClient) Square(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*SquareResponse, error) {
	out := new(SquareResponse)
	err := c.cc.Invoke(ctx, CaculatorService_Square_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaculatorServiceServer is the server API for CaculatorService service.
// All implementations must embed UnimplementedCaculatorServiceServer
// for forward compatibility
type CaculatorServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	PrimeNumberDecomposition(*PNDRequest, CaculatorService_PrimeNumberDecompositionServer) error
	Average(CaculatorService_AverageServer) error
	FindMax(CaculatorService_FindMaxServer) error
	SumWithDeadline(context.Context, *SumRequest) (*SumResponse, error)
	Square(context.Context, *SquareRequest) (*SquareResponse, error)
	mustEmbedUnimplementedCaculatorServiceServer()
}

// UnimplementedCaculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaculatorServiceServer struct {
}

func (UnimplementedCaculatorServiceServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCaculatorServiceServer) PrimeNumberDecomposition(*PNDRequest, CaculatorService_PrimeNumberDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecomposition not implemented")
}
func (UnimplementedCaculatorServiceServer) Average(CaculatorService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedCaculatorServiceServer) FindMax(CaculatorService_FindMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMax not implemented")
}
func (UnimplementedCaculatorServiceServer) SumWithDeadline(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumWithDeadline not implemented")
}
func (UnimplementedCaculatorServiceServer) Square(context.Context, *SquareRequest) (*SquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (UnimplementedCaculatorServiceServer) mustEmbedUnimplementedCaculatorServiceServer() {}

// UnsafeCaculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaculatorServiceServer will
// result in compilation errors.
type UnsafeCaculatorServiceServer interface {
	mustEmbedUnimplementedCaculatorServiceServer()
}

func RegisterCaculatorServiceServer(s grpc.ServiceRegistrar, srv CaculatorServiceServer) {
	s.RegisterService(&CaculatorService_ServiceDesc, srv)
}

func _CaculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaculatorService_Sum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaculatorService_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PNDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaculatorServiceServer).PrimeNumberDecomposition(m, &caculatorServicePrimeNumberDecompositionServer{stream})
}

type CaculatorService_PrimeNumberDecompositionServer interface {
	Send(*PNDResponse) error
	grpc.ServerStream
}

type caculatorServicePrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *caculatorServicePrimeNumberDecompositionServer) Send(m *PNDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CaculatorService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CaculatorServiceServer).Average(&caculatorServiceAverageServer{stream})
}

type CaculatorService_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type caculatorServiceAverageServer struct {
	grpc.ServerStream
}

func (x *caculatorServiceAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *caculatorServiceAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CaculatorService_FindMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CaculatorServiceServer).FindMax(&caculatorServiceFindMaxServer{stream})
}

type CaculatorService_FindMaxServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type caculatorServiceFindMaxServer struct {
	grpc.ServerStream
}

func (x *caculatorServiceFindMaxServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *caculatorServiceFindMaxServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CaculatorService_SumWithDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServiceServer).SumWithDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaculatorService_SumWithDeadline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServiceServer).SumWithDeadline(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaculatorService_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServiceServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaculatorService_Square_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServiceServer).Square(ctx, req.(*SquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaculatorService_ServiceDesc is the grpc.ServiceDesc for CaculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caculator.CaculatorService",
	HandlerType: (*CaculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CaculatorService_Sum_Handler,
		},
		{
			MethodName: "SumWithDeadline",
			Handler:    _CaculatorService_SumWithDeadline_Handler,
		},
		{
			MethodName: "Square",
			Handler:    _CaculatorService_Square_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecomposition",
			Handler:       _CaculatorService_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _CaculatorService_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMax",
			Handler:       _CaculatorService_FindMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "caculator/caculatorpb/caculator.proto",
}
